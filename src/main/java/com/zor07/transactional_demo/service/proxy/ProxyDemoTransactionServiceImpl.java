package com.zor07.transactional_demo.service.proxy;

import com.zor07.transactional_demo.entity.TransactionLog;
import com.zor07.transactional_demo.entity.User;
import com.zor07.transactional_demo.repository.TransactionRepository;
import com.zor07.transactional_demo.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
public class ProxyDemoTransactionServiceImpl implements ProxyDemoTransactionService {
    private final UserRepository userRepository;
    private final TransactionRepository transactionLogRepository;

    public ProxyDemoTransactionServiceImpl(UserRepository userRepository, TransactionRepository transactionRepository) {
        this.userRepository = userRepository;
        this.transactionLogRepository = transactionRepository;
    }

    @Override
    public void processTransaction(Long userId, BigDecimal amount, boolean throwError) {
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"));
        user.setBalance(user.getBalance().add(amount));
        userRepository.save(user);
        System.out.println("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω: " + user.getBalance());

        // 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        TransactionLog log = new TransactionLog(user, amount);
        transactionLogRepository.save(log);
        System.out.println("üìù –õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω.");

        // 3. –≠–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if (throwError) {
            throw new RuntimeException("‚ùå –û—à–∏–±–∫–∞! –î–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—Ç–∫–∞—Ç.");
        }
    }
}
