package com.zor07.transactional_demo.service.proxy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Å–∏-–≤—ã–∑–æ–≤–æ–≤, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {@link InvocationHandler}, —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
 * <p>
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —É—á–µ–±–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≥–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è {@code @Transactional} "–ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º"
 * –≤ Spring. –í–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AOP –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç—Å—è, –∫–æ–º–º–∏—Ç–∏—Ç—Å—è –∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é.
 * <p>
 * –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â—É—é –ª–æ–≥–∏–∫—É:
 * <ol>
 *     <li>–ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ {@link PlatformTransactionManager#getTransaction}.</li>
 *     <li>–í—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞).</li>
 *     <li>–ï—Å–ª–∏ –º–µ—Ç–æ–¥ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</li>
 *     <li>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.</li>
 * </ol>
 * <p>
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è Spring, –Ω–æ –≤ —è–≤–Ω–æ–π —Ñ–æ—Ä–º–µ.
 *
 * <p><b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> —Ç–∞–∫–æ–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JDK Proxy
 * (–∞ –Ω–µ CGLIB, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–ª–∞—Å—Å—ã).</p>
 *
 * <p><b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> —Å–º. {@code @Bean proxyDemoTransactionService()} ‚Äî –±–∏–Ω –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏.</p>
 */
public class TransactionalProxyHandler implements InvocationHandler {

    private static final Logger log = LoggerFactory.getLogger(TransactionalProxyHandler.class);

    /**
     * –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç—Å—è –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤.
     */
    private final Object target;
    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Spring, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤—Ä—É—á–Ω—É—é.
     */
    private final PlatformTransactionManager transactionManager;

    public TransactionalProxyHandler(Object target, PlatformTransactionManager transactionManager) {
        this.target = target;
        this.transactionManager = transactionManager;
    }


    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
     *
     * <p>–ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ ‚Äî —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞.
     * –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç rollback.</p>
     *
     * @param proxy –ü—Ä–æ–∫—Å–∏-–æ–±—ä–µ–∫—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
     * @param method –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–æ–¥–∞.
     * @return –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞.
     * @throws Throwable –õ—é–±–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫—à–∞—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞.
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionDefinition());
        log.info("üîπ [–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å]");

        try {
            Object result = method.invoke(target, args);
            transactionManager.commit(status);
            log.info("‚úÖ [–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞]");
            return result;
        } catch (Exception e) {
            transactionManager.rollback(status);
            log.info("‚ùå [–û—à–∏–±–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è]");
            throw e;
        }
    }
}
